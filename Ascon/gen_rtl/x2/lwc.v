`define BSV_POSITIVE_RESET
//
// Generated by Bluespec Compiler, version 2022.01-38-g3606bc14 (build 3606bc14)
//
//
// Ports:
// Name                         I/O  size props
// pdi_ready                      O     1
// sdi_ready                      O     1
// do_data                        O    32 reg
// do_last                        O     1 reg
// do_valid                       O     1 reg
// clk                            I     1 clock
// rst                            I     1 reset
// pdi_data                       I    32
// pdi_valid                      I     1
// sdi_data                       I    32
// sdi_valid                      I     1
// do_ready                       I     1
//
// Combinational paths from inputs to outputs:
//   do_ready -> pdi_ready
//
//
// Comments on the inlined module `ascon_inBlock_probe':
//   the output of inputLayer
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module lwc(clk,
	   rst,

	   pdi_data,

	   pdi_valid,

	   pdi_ready,

	   sdi_data,

	   sdi_valid,

	   sdi_ready,

	   do_data,

	   do_last,

	   do_valid,

	   do_ready);
  input  clk;
  input  rst;

  // action method pdi_data
  input  [31 : 0] pdi_data;

  // action method pdi_valid
  input  pdi_valid;

  // value method pdi_ready
  output pdi_ready;

  // action method sdi_data
  input  [31 : 0] sdi_data;

  // action method sdi_valid
  input  sdi_valid;

  // value method sdi_ready
  output sdi_ready;

  // value method do__data
  output [31 : 0] do_data;

  // value method do__last
  output do_last;

  // value method do__valid
  output do_valid;

  // action method do__ready
  input  do_ready;

  // signals for module outputs
  wire [31 : 0] do_data;
  wire do_last, do_valid, pdi_ready, sdi_ready;

  // inlined wires
  wire [71 : 0] ascon_outLayer_enq_wire_wget;
  wire [35 : 0] ascon_inLayer_enq_wire_wget;
  wire [32 : 0] lwc_headersFifo_rv_port0__write_1,
		lwc_headersFifo_rv_port1__read,
		lwc_headersFifo_rv_port1__write_1,
		lwc_headersFifo_rv_port2__read,
		lwc_pdiReceiver_fifof_rv_port1__read,
		lwc_pdiReceiver_fifof_rv_port1__write_1,
		lwc_pdiReceiver_fifof_rv_port2__read,
		lwc_sdiReceiver_fifof_rv_port1__read,
		lwc_sdiReceiver_fifof_rv_port1__write_1,
		lwc_sdiReceiver_fifof_rv_port2__read,
		lwc_tagFifo_rv_port1__read,
		lwc_tagFifo_rv_port1__write_1,
		lwc_tagFifo_rv_port2__read;
  wire ascon_inLayer_do_close_whas,
       ascon_inLayer_enq_wire_whas,
       ascon_outLayer_do_deq_whas,
       ascon_outLayer_enq_wire_whas,
       lwc_doSender_do_enq_whas,
       lwc_headersFifo_rv_EN_port1__write,
       lwc_pdiReceiver_deq_pw_whas,
       lwc_pdiReceiver_fifof_rv_EN_port0__write,
       lwc_pdiReceiver_fifof_rv_EN_port1__write,
       lwc_sdiReceiver_deq_pw_whas,
       lwc_sdiReceiver_fifof_rv_EN_port0__write,
       lwc_sdiReceiver_fifof_rv_EN_port1__write;

  // register ascon_bdiFlags
  reg [6 : 0] ascon_bdiFlags;
  wire [6 : 0] ascon_bdiFlags_D_IN;
  wire ascon_bdiFlags_EN;

  // register ascon_cipher_asconState
  reg [319 : 0] ascon_cipher_asconState;
  reg [319 : 0] ascon_cipher_asconState_D_IN;
  wire ascon_cipher_asconState_EN;

  // register ascon_cipher_first_block
  reg ascon_cipher_first_block;
  wire ascon_cipher_first_block_D_IN, ascon_cipher_first_block_EN;

  // register ascon_cipher_keyStore
  reg [127 : 0] ascon_cipher_keyStore;
  wire [127 : 0] ascon_cipher_keyStore_D_IN;
  wire ascon_cipher_keyStore_EN;

  // register ascon_cipher_loadNonceCounter
  reg ascon_cipher_loadNonceCounter;
  wire ascon_cipher_loadNonceCounter_D_IN, ascon_cipher_loadNonceCounter_EN;

  // register ascon_cipher_postPermuteState
  reg [2 : 0] ascon_cipher_postPermuteState;
  reg [2 : 0] ascon_cipher_postPermuteState_D_IN;
  wire ascon_cipher_postPermuteState_EN;

  // register ascon_cipher_roundConstant
  reg [7 : 0] ascon_cipher_roundConstant;
  reg [7 : 0] ascon_cipher_roundConstant_D_IN;
  wire ascon_cipher_roundConstant_EN;

  // register ascon_cipher_roundCounter
  reg [2 : 0] ascon_cipher_roundCounter;
  reg [2 : 0] ascon_cipher_roundCounter_D_IN;
  wire ascon_cipher_roundCounter_EN;

  // register ascon_cipher_squeezeCounter
  reg [1 : 0] ascon_cipher_squeezeCounter;
  wire [1 : 0] ascon_cipher_squeezeCounter_D_IN;
  wire ascon_cipher_squeezeCounter_EN;

  // register ascon_cipher_squeezeHash
  reg ascon_cipher_squeezeHash;
  wire ascon_cipher_squeezeHash_D_IN, ascon_cipher_squeezeHash_EN;

  // register ascon_cipher_state
  reg [2 : 0] ascon_cipher_state;
  reg [2 : 0] ascon_cipher_state_D_IN;
  wire ascon_cipher_state_EN;

  // register ascon_inLayer_block
  reg [63 : 0] ascon_inLayer_block;
  wire [63 : 0] ascon_inLayer_block_D_IN;
  wire ascon_inLayer_block_EN;

  // register ascon_inLayer_closed
  reg ascon_inLayer_closed;
  wire ascon_inLayer_closed_D_IN, ascon_inLayer_closed_EN;

  // register ascon_inLayer_counter
  reg [1 : 0] ascon_inLayer_counter;
  wire [1 : 0] ascon_inLayer_counter_D_IN;
  wire ascon_inLayer_counter_EN;

  // register ascon_inLayer_needsPad
  reg ascon_inLayer_needsPad;
  wire ascon_inLayer_needsPad_D_IN, ascon_inLayer_needsPad_EN;

  // register ascon_inLayer_valids
  reg [7 : 0] ascon_inLayer_valids;
  wire [7 : 0] ascon_inLayer_valids_D_IN;
  wire ascon_inLayer_valids_EN;

  // register ascon_outLayer_blockVec
  reg [63 : 0] ascon_outLayer_blockVec;
  wire [63 : 0] ascon_outLayer_blockVec_D_IN;
  wire ascon_outLayer_blockVec_EN;

  // register ascon_outLayer_validsVec
  reg [7 : 0] ascon_outLayer_validsVec;
  wire [7 : 0] ascon_outLayer_validsVec_D_IN;
  wire ascon_outLayer_validsVec_EN;

  // register lwc_doSender_data_reg
  reg [32 : 0] lwc_doSender_data_reg;
  reg [32 : 0] lwc_doSender_data_reg_D_IN;
  wire lwc_doSender_data_reg_EN;

  // register lwc_doSender_data_valid
  reg lwc_doSender_data_valid;
  wire lwc_doSender_data_valid_D_IN, lwc_doSender_data_valid_EN;

  // register lwc_finalRemainBytes
  reg [1 : 0] lwc_finalRemainBytes;
  wire [1 : 0] lwc_finalRemainBytes_D_IN;
  wire lwc_finalRemainBytes_EN;

  // register lwc_headersFifo_rv
  reg [32 : 0] lwc_headersFifo_rv;
  wire [32 : 0] lwc_headersFifo_rv_D_IN;
  wire lwc_headersFifo_rv_EN;

  // register lwc_inFlags
  reg [8 : 0] lwc_inFlags;
  wire [8 : 0] lwc_inFlags_D_IN;
  wire lwc_inFlags_EN;

  // register lwc_inSegEoT
  reg lwc_inSegEoT;
  wire lwc_inSegEoT_D_IN, lwc_inSegEoT_EN;

  // register lwc_inSegLast
  reg lwc_inSegLast;
  wire lwc_inSegLast_D_IN, lwc_inSegLast_EN;

  // register lwc_op_decrypt
  reg lwc_op_decrypt;
  wire lwc_op_decrypt_D_IN, lwc_op_decrypt_EN;

  // register lwc_outCounter
  reg [13 : 0] lwc_outCounter;
  reg [13 : 0] lwc_outCounter_D_IN;
  wire lwc_outCounter_EN;

  // register lwc_outRemainder
  reg [1 : 0] lwc_outRemainder;
  wire [1 : 0] lwc_outRemainder_D_IN;
  wire lwc_outRemainder_EN;

  // register lwc_outSegLast
  reg lwc_outSegLast;
  wire lwc_outSegLast_D_IN, lwc_outSegLast_EN;

  // register lwc_outSegPt
  reg lwc_outSegPt;
  wire lwc_outSegPt_D_IN, lwc_outSegPt_EN;

  // register lwc_outState
  reg [1 : 0] lwc_outState;
  reg [1 : 0] lwc_outState_D_IN;
  wire lwc_outState_EN;

  // register lwc_pdiCounter
  reg [13 : 0] lwc_pdiCounter;
  wire [13 : 0] lwc_pdiCounter_D_IN;
  wire lwc_pdiCounter_EN;

  // register lwc_pdiReceiver_fifof_rv
  reg [32 : 0] lwc_pdiReceiver_fifof_rv;
  wire [32 : 0] lwc_pdiReceiver_fifof_rv_D_IN;
  wire lwc_pdiReceiver_fifof_rv_EN;

  // register lwc_pdiState
  reg [2 : 0] lwc_pdiState;
  reg [2 : 0] lwc_pdiState_D_IN;
  wire lwc_pdiState_EN;

  // register lwc_sdiCounter
  reg [31 : 0] lwc_sdiCounter;
  wire [31 : 0] lwc_sdiCounter_D_IN;
  wire lwc_sdiCounter_EN;

  // register lwc_sdiReceiver_fifof_rv
  reg [32 : 0] lwc_sdiReceiver_fifof_rv;
  wire [32 : 0] lwc_sdiReceiver_fifof_rv_D_IN;
  wire lwc_sdiReceiver_fifof_rv_EN;

  // register lwc_sdiState
  reg [1 : 0] lwc_sdiState;
  reg [1 : 0] lwc_sdiState_D_IN;
  wire lwc_sdiState_EN;

  // register lwc_statFailure
  reg lwc_statFailure;
  wire lwc_statFailure_D_IN, lwc_statFailure_EN;

  // register lwc_tagFifo_rv
  reg [32 : 0] lwc_tagFifo_rv;
  wire [32 : 0] lwc_tagFifo_rv_D_IN;
  wire lwc_tagFifo_rv_EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_ascon_inLayer_rl_enq_deq,
       WILL_FIRE_RL_ascon_inLayer_rl_pad,
       WILL_FIRE_RL_ascon_rl_get_inlayer,
       WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest,
       WILL_FIRE_RL_lwc_enq_tag,
       WILL_FIRE_RL_lwc_get_key_data,
       WILL_FIRE_RL_lwc_get_pdi_data,
       WILL_FIRE_RL_lwc_get_pdi_header,
       WILL_FIRE_RL_lwc_get_sdi_header,
       WILL_FIRE_RL_lwc_get_sdi_inst,
       WILL_FIRE_RL_lwc_get_tag_data,
       WILL_FIRE_RL_lwc_get_tag_header,
       WILL_FIRE_RL_lwc_out_header,
       WILL_FIRE_RL_lwc_out_status,
       WILL_FIRE_RL_lwc_pdi_instruction,
       WILL_FIRE_RL_lwc_send_empty_input,
       WILL_FIRE_RL_lwc_sendout_data,
       WILL_FIRE_RL_lwc_verify_tag;

  // inputs to muxes for submodule ports
  wire [319 : 0] MUX_ascon_cipher_asconState_write_1__VAL_2,
		 MUX_ascon_cipher_asconState_write_1__VAL_3;
  wire [71 : 0] MUX_ascon_outLayer_enq_wire_wset_1__VAL_1,
		MUX_ascon_outLayer_enq_wire_wset_1__VAL_2;
  wire [35 : 0] MUX_ascon_inLayer_enq_wire_wset_1__VAL_1;
  wire [32 : 0] MUX_lwc_doSender_data_reg_write_1__VAL_1,
		MUX_lwc_doSender_data_reg_write_1__VAL_2,
		MUX_lwc_doSender_data_reg_write_1__VAL_3,
		MUX_lwc_headersFifo_rv_port1__write_1__VAL_1;
  wire [31 : 0] MUX_lwc_sdiCounter_write_1__VAL_1;
  wire [13 : 0] MUX_lwc_outCounter_write_1__VAL_1,
		MUX_lwc_outCounter_write_1__VAL_2,
		MUX_lwc_pdiCounter_write_1__VAL_1;
  wire [7 : 0] MUX_ascon_cipher_roundConstant_write_1__VAL_2,
	       MUX_ascon_cipher_roundConstant_write_1__VAL_3;
  wire [2 : 0] MUX_ascon_cipher_postPermuteState_write_1__VAL_2,
	       MUX_ascon_cipher_roundCounter_write_1__VAL_2,
	       MUX_ascon_cipher_roundCounter_write_1__VAL_3,
	       MUX_ascon_cipher_state_write_1__VAL_1,
	       MUX_ascon_cipher_state_write_1__VAL_4,
	       MUX_lwc_pdiState_write_1__VAL_3,
	       MUX_lwc_pdiState_write_1__VAL_4,
	       MUX_lwc_pdiState_write_1__VAL_5;
  wire [1 : 0] MUX_ascon_cipher_squeezeCounter_write_1__VAL_2,
	       MUX_lwc_outState_write_1__VAL_2,
	       MUX_lwc_outState_write_1__VAL_3;
  wire MUX_ascon_cipher_asconState_write_1__SEL_1,
       MUX_ascon_cipher_first_block_write_1__SEL_1,
       MUX_ascon_cipher_first_block_write_1__VAL_2,
       MUX_ascon_cipher_loadNonceCounter_write_1__SEL_1,
       MUX_ascon_cipher_loadNonceCounter_write_1__VAL_1,
       MUX_ascon_cipher_state_write_1__SEL_2,
       MUX_ascon_cipher_state_write_1__SEL_3,
       MUX_ascon_cipher_state_write_1__SEL_4,
       MUX_ascon_cipher_state_write_1__SEL_5,
       MUX_ascon_inLayer_needsPad_write_1__SEL_1,
       MUX_ascon_outLayer_enq_wire_wset_1__SEL_1,
       MUX_lwc_headersFifo_rv_port1__write_1__SEL_1,
       MUX_lwc_outCounter_write_1__SEL_1,
       MUX_lwc_outCounter_write_1__SEL_2,
       MUX_lwc_outState_write_1__SEL_1,
       MUX_lwc_outState_write_1__SEL_2,
       MUX_lwc_outState_write_1__SEL_3,
       MUX_lwc_pdiCounter_write_1__SEL_1,
       MUX_lwc_pdiState_write_1__SEL_2,
       MUX_lwc_pdiState_write_1__SEL_3,
       MUX_lwc_sdiState_write_1__SEL_1,
       MUX_lwc_statFailure_write_1__SEL_1;

  // remaining internal signals
  reg [63 : 0] CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2,
	       CASE_ascon_cipher_squeezeCounter_BIT_0_0_ascon_ETC__q3;
  wire [319 : 0] IF_ascon_cipher_loadNonceCounter_28_THEN_ascon_ETC___d256;
  wire [191 : 0] IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d276,
		 ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d122;
  wire [63 : 0] IF_NOT_ascon_bdiFlags_25_BIT_5_58_79_OR_NOT_as_ETC___d337,
		IF_NOT_ascon_inLayer_needsPad_86_07_AND_ascon__ETC___d275,
		IF_NOT_ascon_inLayer_needsPad_86_07_AND_ascon__ETC___d278,
		IF_ascon_bdiFlags_25_BIT_5_58_AND_ascon_cipher_ETC___d270,
		IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d261,
		IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387,
		INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d100,
		INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d103,
		INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d90,
		ascon_cipher_asconState_BITS_127_TO_64_0_XOR_I_ETC___d68,
		ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d29,
		ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d32,
		ascon_cipher_asconState_BITS_255_TO_192_XOR_IN_ETC___d41,
		ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d20,
		ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d42,
		ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d6,
		ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d128,
		ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d45,
		ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d55,
		ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d8,
		x__h1212,
		x__h1214,
		x__h1890,
		x__h1892,
		x__h5776,
		x__h5778,
		x__h6025,
		x__h6027,
		x__h6177,
		x__h6179,
		x__h6390,
		x__h6392,
		x__h9262,
		x__h9264,
		x__h9417,
		x__h9419,
		x__h9521,
		x__h9523,
		x__h9676,
		x__h9678,
		y__h1213,
		y__h1215,
		y__h1891,
		y__h1893,
		y__h5777,
		y__h5779,
		y__h6026,
		y__h6028,
		y__h6178,
		y__h6180,
		y__h6391,
		y__h6393,
		y__h9263,
		y__h9265,
		y__h9418,
		y__h9420,
		y__h9522,
		y__h9524,
		y__h9677,
		y__h9679;
  wire [55 : 0] IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325,
		IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d324,
		ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301;
  wire [39 : 0] IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d317;
  wire [31 : 0] lwc_headersFifo_rv_BITS_31_TO_0__q4,
		lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1,
		sw__h48418,
		x__h45818;
  wire [23 : 0] IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d310;
  wire [13 : 0] x__h52158;
  wire [7 : 0] IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d288,
	       ascon_inLayer_block_70_BITS_7_TO_0_29_XOR_asco_ETC___d286,
	       b__h49591,
	       b__h50775,
	       b__h50887,
	       b__h50999,
	       spliced_bits__h2738,
	       spliced_bits__h5981;
  wire [3 : 0] a__h45196,
	       ascon_cipher_roundConstant_6_BITS_7_TO_4_3_MIN_ETC___d94,
	       oh__h45135,
	       valid_bytes__h44407;
  wire [1 : 0] x__h11719;
  wire NOT_IF_lwc_tagFifo_rv_port0__read__40_BIT_32_4_ETC___d676,
       NOT_ascon_cipher_first_block_57_80_AND_NOT_asc_ETC___d346,
       NOT_lwc_outCounter_44_BITS_13_TO_1_77_EQ_0_78__ETC___d696,
       _dand2ascon_inLayer_do_close_EN_wset,
       ascon_outLayer_validsVec_98_BITS_3_TO_0_02_EQ__ETC___d221;

  // value method pdi_ready
  assign pdi_ready =
	     !lwc_pdiReceiver_fifof_rv_port1__read[32] ||
	     lwc_pdiReceiver_deq_pw_whas ;

  // value method sdi_ready
  assign sdi_ready =
	     !lwc_sdiReceiver_fifof_rv_port1__read[32] ||
	     lwc_sdiReceiver_deq_pw_whas ;

  // value method do__data
  assign do_data = lwc_doSender_data_reg[31:0] ;

  // value method do__last
  assign do_last = lwc_doSender_data_reg[32] ;

  // value method do__valid
  assign do_valid = lwc_doSender_data_valid ;

  // rule RL_ascon_inLayer_rl_pad
  assign WILL_FIRE_RL_ascon_inLayer_rl_pad =
	     ascon_inLayer_counter != 2'd2 && ascon_inLayer_needsPad ;

  // rule RL_lwc_get_sdi_inst
  assign WILL_FIRE_RL_lwc_get_sdi_inst =
	     lwc_pdiState != 3'd0 && lwc_sdiState == 2'd1 &&
	     lwc_sdiReceiver_fifof_rv[32] ;

  // rule RL_lwc_get_sdi_header
  assign WILL_FIRE_RL_lwc_get_sdi_header =
	     lwc_pdiState != 3'd0 && lwc_sdiState == 2'd2 &&
	     lwc_sdiReceiver_fifof_rv[32] ;

  // rule RL_lwc_get_key_data
  assign WILL_FIRE_RL_lwc_get_key_data =
	     ascon_cipher_state == 3'd1 && lwc_pdiState != 3'd0 &&
	     lwc_sdiState == 2'd3 &&
	     lwc_sdiReceiver_fifof_rv[32] ;

  // rule RL_lwc_pdi_instruction
  assign WILL_FIRE_RL_lwc_pdi_instruction =
	     ascon_cipher_state == 3'd0 && lwc_pdiState == 3'd0 &&
	     lwc_pdiReceiver_fifof_rv[32] ;

  // rule RL_lwc_get_tag_header
  assign WILL_FIRE_RL_lwc_get_tag_header =
	     lwc_pdiState == 3'd3 && lwc_pdiReceiver_fifof_rv[32] ;

  // rule RL_lwc_out_header
  assign WILL_FIRE_RL_lwc_out_header =
	     lwc_outState == 2'd0 && lwc_headersFifo_rv[32] &&
	     (!lwc_doSender_data_valid || do_ready) ;

  // rule RL_lwc_get_pdi_header
  assign WILL_FIRE_RL_lwc_get_pdi_header =
	     lwc_pdiState == 3'd1 && lwc_pdiReceiver_fifof_rv[32] &&
	     !lwc_headersFifo_rv_port1__read[32] ;

  // rule RL_lwc_enq_tag
  assign WILL_FIRE_RL_lwc_enq_tag =
	     lwc_pdiState == 3'd6 && !lwc_headersFifo_rv_port1__read[32] ;

  // rule RL_lwc_verify_tag
  assign WILL_FIRE_RL_lwc_verify_tag =
	     ascon_outLayer_validsVec[3:0] != 4'd0 && lwc_outState == 2'd2 &&
	     lwc_tagFifo_rv[32] ;

  // rule RL_lwc_get_tag_data
  assign WILL_FIRE_RL_lwc_get_tag_data =
	     lwc_pdiState == 3'd4 && lwc_pdiReceiver_fifof_rv[32] &&
	     !lwc_tagFifo_rv_port1__read[32] ;

  // rule RL_lwc_sendout_data
  assign WILL_FIRE_RL_lwc_sendout_data =
	     ascon_outLayer_validsVec[3:0] != 4'd0 && lwc_outState == 2'd1 &&
	     (!lwc_doSender_data_valid || do_ready) ;

  // rule RL_ascon_rl_get_inlayer
  assign WILL_FIRE_RL_ascon_rl_get_inlayer =
	     ascon_inLayer_counter == 2'd2 &&
	     ascon_outLayer_validsVec[3:0] == 4'd0 &&
	     ascon_cipher_state == 3'd2 ||
	     ascon_outLayer_validsVec_98_BITS_3_TO_0_02_EQ__ETC___d221 ;

  // rule RL_ascon_rl_squeeze_tag_or_digest
  assign WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest =
	     ascon_outLayer_validsVec[3:0] == 4'd0 &&
	     ascon_cipher_state == 3'd4 ||
	     ascon_outLayer_validsVec[7:4] == 4'd0 &&
	     ascon_cipher_state == 3'd4 &&
	     ascon_outLayer_do_deq_whas ;

  // rule RL_lwc_send_empty_input
  assign WILL_FIRE_RL_lwc_send_empty_input =
	     lwc_pdiState == 3'd5 && !ascon_inLayer_needsPad &&
	     WILL_FIRE_RL_ascon_rl_get_inlayer ||
	     ascon_inLayer_counter != 2'd2 && lwc_pdiState == 3'd5 &&
	     !ascon_inLayer_needsPad &&
	     !ascon_inLayer_closed ;

  // rule RL_lwc_get_pdi_data
  assign WILL_FIRE_RL_lwc_get_pdi_data =
	     lwc_pdiState == 3'd2 && !ascon_inLayer_needsPad &&
	     lwc_pdiReceiver_fifof_rv[32] &&
	     WILL_FIRE_RL_ascon_rl_get_inlayer ||
	     ascon_inLayer_counter != 2'd2 && lwc_pdiState == 3'd2 &&
	     !ascon_inLayer_needsPad &&
	     !ascon_inLayer_closed &&
	     lwc_pdiReceiver_fifof_rv[32] ;

  // rule RL_ascon_inLayer_rl_enq_deq
  assign WILL_FIRE_RL_ascon_inLayer_rl_enq_deq =
	     WILL_FIRE_RL_ascon_rl_get_inlayer ||
	     ascon_inLayer_enq_wire_whas ;

  // rule RL_lwc_out_status
  assign WILL_FIRE_RL_lwc_out_status =
	     lwc_outState == 2'd3 && (!lwc_doSender_data_valid || do_ready) ;

  // inputs to muxes for submodule ports
  assign MUX_ascon_cipher_asconState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29] &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ;
  assign MUX_ascon_cipher_first_block_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ;
  assign MUX_ascon_cipher_loadNonceCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_get_inlayer && ascon_bdiFlags[6] ;
  assign MUX_ascon_cipher_state_write_1__SEL_2 =
	     ascon_cipher_state == 3'd3 && ascon_cipher_roundCounter == 3'd5 ;
  assign MUX_ascon_cipher_state_write_1__SEL_3 =
	     WILL_FIRE_RL_ascon_rl_get_inlayer &&
	     (!ascon_bdiFlags[5] && !ascon_bdiFlags[6] ||
	      NOT_ascon_cipher_first_block_57_80_AND_NOT_asc_ETC___d346) ;
  assign MUX_ascon_cipher_state_write_1__SEL_4 =
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest &&
	     (ascon_cipher_squeezeCounter[0] || ascon_cipher_squeezeHash) ;
  assign MUX_ascon_cipher_state_write_1__SEL_5 =
	     WILL_FIRE_RL_lwc_get_key_data && lwc_sdiCounter == 32'd0 ;
  assign MUX_ascon_inLayer_needsPad_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_pdi_data &&
	     (lwc_pdiCounter[13:1] == 13'd0 && !lwc_inFlags[8] &&
	      lwc_inSegEoT &&
	      !lwc_pdiCounter[0] &&
	      valid_bytes__h44407[3] ||
	      lwc_finalRemainBytes == 2'd0 && lwc_pdiCounter[13:1] == 13'd0 &&
	      !lwc_inFlags[8] &&
	      lwc_inSegEoT &&
	      valid_bytes__h44407[3]) ;
  assign MUX_ascon_outLayer_enq_wire_wset_1__SEL_1 =
	     WILL_FIRE_RL_ascon_rl_get_inlayer && ascon_bdiFlags[3] ;
  assign MUX_lwc_headersFifo_rv_port1__write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_pdi_header &&
	     (lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:29] == 3'b010 ||
	      lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[25] &&
	      lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29]) ;
  assign MUX_lwc_outCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q4[15:0] != 16'd0 ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[31]) ;
  assign MUX_lwc_outCounter_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_sendout_data &&
	     NOT_lwc_outCounter_44_BITS_13_TO_1_77_EQ_0_78__ETC___d696 ;
  assign MUX_lwc_outState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_verify_tag && lwc_outCounter[13:1] == 13'd0 ;
  assign MUX_lwc_outState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ;
  assign MUX_lwc_outState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q4[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q4[24] ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[31]) ;
  assign MUX_lwc_pdiCounter_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_get_tag_data || WILL_FIRE_RL_lwc_get_pdi_data ;
  assign MUX_lwc_pdiState_write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_get_tag_data && lwc_pdiCounter[13:1] == 13'd0 ;
  assign MUX_lwc_pdiState_write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_get_pdi_data &&
	     (lwc_pdiCounter[13:1] == 13'd0 && !lwc_pdiCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 && lwc_pdiCounter[13:1] == 13'd0) ;
  assign MUX_lwc_sdiState_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ;
  assign MUX_lwc_statFailure_write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_verify_tag &&
	     NOT_IF_lwc_tagFifo_rv_port0__read__40_BIT_32_4_ETC___d676 ;
  assign MUX_ascon_cipher_asconState_write_1__VAL_2 =
	     { ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d122,
	       x__h9521 ^ y__h9522,
	       x__h9676 ^ y__h9677 } ;
  assign MUX_ascon_cipher_asconState_write_1__VAL_3 =
	     ascon_bdiFlags[6] ?
	       IF_ascon_cipher_loadNonceCounter_28_THEN_ascon_ETC___d256 :
	       { IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d276,
		 IF_NOT_ascon_inLayer_needsPad_86_07_AND_ascon__ETC___d278,
		 IF_NOT_ascon_bdiFlags_25_BIT_5_58_79_OR_NOT_as_ETC___d337 } ;
  assign MUX_ascon_cipher_first_block_write_1__VAL_2 =
	     ascon_bdiFlags[6] ||
	     !ascon_inLayer_needsPad && ascon_inLayer_closed ;
  assign MUX_ascon_cipher_loadNonceCounter_write_1__VAL_1 =
	     ascon_cipher_loadNonceCounter + 1'd1 ;
  assign MUX_ascon_cipher_postPermuteState_write_1__VAL_2 =
	     (!ascon_inLayer_needsPad && ascon_inLayer_closed &&
	      ascon_bdiFlags[1]) ?
	       3'd4 :
	       3'd2 ;
  assign MUX_ascon_cipher_roundConstant_write_1__VAL_2 =
	     { ascon_cipher_roundConstant_6_BITS_7_TO_4_3_MIN_ETC___d94 -
	       4'd1,
	       ascon_cipher_roundConstant[3:0] + 4'd2 } ;
  assign MUX_ascon_cipher_roundConstant_write_1__VAL_3 =
	     ((!ascon_inLayer_closed || !ascon_bdiFlags[3] ||
	       ascon_inLayer_needsPad) &&
	      ascon_bdiFlags[0]) ?
	       8'h96 :
	       8'hF0 ;
  assign MUX_ascon_cipher_roundCounter_write_1__VAL_2 =
	     ((!ascon_inLayer_closed || !ascon_bdiFlags[3] ||
	       ascon_inLayer_needsPad) &&
	      ascon_bdiFlags[0]) ?
	       3'd3 :
	       3'd0 ;
  assign MUX_ascon_cipher_roundCounter_write_1__VAL_3 =
	     ascon_cipher_roundCounter + 3'd1 ;
  assign MUX_ascon_cipher_squeezeCounter_write_1__VAL_2 =
	     ascon_cipher_squeezeCounter + 2'd1 ;
  assign MUX_ascon_cipher_state_write_1__VAL_1 =
	     lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29] ? 3'd1 : 3'd3 ;
  assign MUX_ascon_cipher_state_write_1__VAL_4 =
	     (!ascon_cipher_squeezeHash && ascon_cipher_squeezeCounter[0] ||
	      ascon_cipher_squeezeCounter[0] &&
	      ascon_cipher_squeezeCounter[1]) ?
	       3'd0 :
	       3'd3 ;
  assign MUX_ascon_inLayer_enq_wire_wset_1__VAL_1 =
	     { x__h45818, valid_bytes__h44407 } ;
  assign MUX_ascon_outLayer_enq_wire_wset_1__VAL_1 =
	     { ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301,
	       ascon_inLayer_block_70_BITS_7_TO_0_29_XOR_asco_ETC___d286,
	       ascon_inLayer_valids } ;
  assign MUX_ascon_outLayer_enq_wire_wset_1__VAL_2 =
	     { IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[7:0],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[15:8],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[23:16],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[31:24],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[39:32],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[47:40],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[55:48],
	       IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387[63:56],
	       8'd255 } ;
  assign MUX_lwc_doSender_data_reg_write_1__VAL_1 =
	     { 1'd0, lwc_headersFifo_rv[31:0] } ;
  assign MUX_lwc_doSender_data_reg_write_1__VAL_2 = { 1'd0, sw__h48418 } ;
  assign MUX_lwc_doSender_data_reg_write_1__VAL_3 =
	     { 4'd15, lwc_statFailure, 28'b0 } ;
  assign MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 =
	     (lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:29] == 3'b010) ?
	       { 1'd1,
		 lwc_op_decrypt ? 4'd4 : 4'd5,
		 2'd0,
		 lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[25],
		 lwc_op_decrypt,
		 8'b0,
		 lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[15:0] } :
	       33'h193000020 ;
  assign MUX_lwc_outCounter_write_1__VAL_1 =
	     (lwc_headersFifo_rv_BITS_31_TO_0__q4[15:0] == 16'd0) ?
	       14'd4 :
	       lwc_headersFifo_rv_BITS_31_TO_0__q4[15:2] ;
  assign MUX_lwc_outCounter_write_1__VAL_2 =
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ?
	       14'd4 :
	       x__h52158 ;
  assign MUX_lwc_outState_write_1__VAL_2 =
	     lwc_outSegLast ? (lwc_outSegPt ? 2'd2 : 2'd3) : 2'd0 ;
  assign MUX_lwc_outState_write_1__VAL_3 =
	     (lwc_headersFifo_rv_BITS_31_TO_0__q4[15:0] == 16'd0) ?
	       ((!lwc_headersFifo_rv_BITS_31_TO_0__q4[28] &&
		 !lwc_headersFifo_rv_BITS_31_TO_0__q4[31]) ?
		  2'd2 :
		  2'd3) :
	       2'd1 ;
  assign MUX_lwc_pdiCounter_write_1__VAL_1 = lwc_pdiCounter - 14'd1 ;
  assign MUX_lwc_pdiState_write_1__VAL_3 =
	     lwc_inSegEoT ?
	       (lwc_inFlags[6] ?
		  3'd6 :
		  (lwc_inFlags[4] ? 3'd3 : (lwc_inSegLast ? 3'd0 : 3'd1))) :
	       3'd1 ;
  assign MUX_lwc_pdiState_write_1__VAL_4 =
	     lwc_inFlags[6] ?
	       3'd6 :
	       (lwc_inFlags[4] ? 3'd3 : (lwc_inSegLast ? 3'd0 : 3'd1)) ;
  assign MUX_lwc_pdiState_write_1__VAL_5 =
	     (lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[15:0] == 16'd0) ?
	       3'd5 :
	       3'd2 ;
  assign MUX_lwc_sdiCounter_write_1__VAL_1 = lwc_sdiCounter - 32'd1 ;

  // inlined wires
  assign ascon_inLayer_enq_wire_wget =
	     WILL_FIRE_RL_lwc_get_pdi_data ?
	       MUX_ascon_inLayer_enq_wire_wset_1__VAL_1 :
	       36'd2048 ;
  assign ascon_inLayer_enq_wire_whas =
	     WILL_FIRE_RL_lwc_get_pdi_data ||
	     WILL_FIRE_RL_lwc_send_empty_input ||
	     WILL_FIRE_RL_ascon_inLayer_rl_pad ;
  assign ascon_outLayer_enq_wire_wget =
	     MUX_ascon_outLayer_enq_wire_wset_1__SEL_1 ?
	       MUX_ascon_outLayer_enq_wire_wset_1__VAL_1 :
	       MUX_ascon_outLayer_enq_wire_wset_1__VAL_2 ;
  assign ascon_outLayer_enq_wire_whas =
	     WILL_FIRE_RL_ascon_rl_get_inlayer && ascon_bdiFlags[3] ||
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest ;
  assign ascon_inLayer_do_close_whas =
	     WILL_FIRE_RL_lwc_send_empty_input && !lwc_inFlags[8] ||
	     _dand2ascon_inLayer_do_close_EN_wset ||
	     WILL_FIRE_RL_ascon_inLayer_rl_pad ;
  assign ascon_outLayer_do_deq_whas =
	     WILL_FIRE_RL_lwc_sendout_data || WILL_FIRE_RL_lwc_verify_tag ;
  assign lwc_pdiReceiver_deq_pw_whas =
	     WILL_FIRE_RL_lwc_get_tag_data ||
	     WILL_FIRE_RL_lwc_get_tag_header ||
	     WILL_FIRE_RL_lwc_get_pdi_data ||
	     WILL_FIRE_RL_lwc_get_pdi_header ||
	     WILL_FIRE_RL_lwc_pdi_instruction ;
  assign lwc_sdiReceiver_deq_pw_whas =
	     WILL_FIRE_RL_lwc_get_key_data ||
	     WILL_FIRE_RL_lwc_get_sdi_header ||
	     WILL_FIRE_RL_lwc_get_sdi_inst ;
  assign lwc_doSender_do_enq_whas =
	     WILL_FIRE_RL_lwc_out_status || WILL_FIRE_RL_lwc_sendout_data ||
	     WILL_FIRE_RL_lwc_out_header ;
  assign lwc_pdiReceiver_fifof_rv_EN_port0__write =
	     WILL_FIRE_RL_lwc_get_tag_data ||
	     WILL_FIRE_RL_lwc_get_tag_header ||
	     WILL_FIRE_RL_lwc_get_pdi_data ||
	     WILL_FIRE_RL_lwc_get_pdi_header ||
	     WILL_FIRE_RL_lwc_pdi_instruction ;
  assign lwc_pdiReceiver_fifof_rv_port1__read =
	     lwc_pdiReceiver_fifof_rv_EN_port0__write ?
	       lwc_headersFifo_rv_port0__write_1 :
	       lwc_pdiReceiver_fifof_rv ;
  assign lwc_pdiReceiver_fifof_rv_EN_port1__write =
	     !lwc_pdiReceiver_fifof_rv_port1__read[32] && pdi_valid ;
  assign lwc_pdiReceiver_fifof_rv_port1__write_1 = { 1'd1, pdi_data } ;
  assign lwc_pdiReceiver_fifof_rv_port2__read =
	     lwc_pdiReceiver_fifof_rv_EN_port1__write ?
	       lwc_pdiReceiver_fifof_rv_port1__write_1 :
	       lwc_pdiReceiver_fifof_rv_port1__read ;
  assign lwc_sdiReceiver_fifof_rv_EN_port0__write =
	     WILL_FIRE_RL_lwc_get_key_data ||
	     WILL_FIRE_RL_lwc_get_sdi_header ||
	     WILL_FIRE_RL_lwc_get_sdi_inst ;
  assign lwc_sdiReceiver_fifof_rv_port1__read =
	     lwc_sdiReceiver_fifof_rv_EN_port0__write ?
	       lwc_headersFifo_rv_port0__write_1 :
	       lwc_sdiReceiver_fifof_rv ;
  assign lwc_sdiReceiver_fifof_rv_EN_port1__write =
	     !lwc_sdiReceiver_fifof_rv_port1__read[32] && sdi_valid ;
  assign lwc_sdiReceiver_fifof_rv_port1__write_1 = { 1'd1, sdi_data } ;
  assign lwc_sdiReceiver_fifof_rv_port2__read =
	     lwc_sdiReceiver_fifof_rv_EN_port1__write ?
	       lwc_sdiReceiver_fifof_rv_port1__write_1 :
	       lwc_sdiReceiver_fifof_rv_port1__read ;
  assign lwc_headersFifo_rv_port0__write_1 =
	     { 1'd0,
	       32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  } ;
  assign lwc_headersFifo_rv_port1__read =
	     WILL_FIRE_RL_lwc_out_header ?
	       lwc_headersFifo_rv_port0__write_1 :
	       lwc_headersFifo_rv ;
  assign lwc_headersFifo_rv_EN_port1__write =
	     WILL_FIRE_RL_lwc_get_pdi_header &&
	     (lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:29] == 3'b010 ||
	      lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[25] &&
	      lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29]) ||
	     WILL_FIRE_RL_lwc_enq_tag ;
  assign lwc_headersFifo_rv_port1__write_1 =
	     MUX_lwc_headersFifo_rv_port1__write_1__SEL_1 ?
	       MUX_lwc_headersFifo_rv_port1__write_1__VAL_1 :
	       33'h183000010 ;
  assign lwc_headersFifo_rv_port2__read =
	     lwc_headersFifo_rv_EN_port1__write ?
	       lwc_headersFifo_rv_port1__write_1 :
	       lwc_headersFifo_rv_port1__read ;
  assign lwc_tagFifo_rv_port1__read =
	     WILL_FIRE_RL_lwc_verify_tag ?
	       lwc_headersFifo_rv_port0__write_1 :
	       lwc_tagFifo_rv ;
  assign lwc_tagFifo_rv_port1__write_1 =
	     { 1'd1, lwc_pdiReceiver_fifof_rv[31:0] } ;
  assign lwc_tagFifo_rv_port2__read =
	     WILL_FIRE_RL_lwc_get_tag_data ?
	       lwc_tagFifo_rv_port1__write_1 :
	       lwc_tagFifo_rv_port1__read ;

  // register ascon_bdiFlags
  assign ascon_bdiFlags_D_IN =
	     { lwc_inFlags[8:7],
	       lwc_inFlags[4:2],
	       !lwc_inFlags[8] && !lwc_inFlags[7],
	       !lwc_inFlags[8] && !lwc_inFlags[2] } ;
  assign ascon_bdiFlags_EN =
	     WILL_FIRE_RL_lwc_get_pdi_data ||
	     WILL_FIRE_RL_lwc_send_empty_input ;

  // register ascon_cipher_asconState
  always@(MUX_ascon_cipher_asconState_write_1__SEL_1 or
	  ascon_cipher_state or
	  MUX_ascon_cipher_asconState_write_1__VAL_2 or
	  WILL_FIRE_RL_ascon_rl_get_inlayer or
	  MUX_ascon_cipher_asconState_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_cipher_asconState_write_1__SEL_1:
	  ascon_cipher_asconState_D_IN =
	      320'h000000000000000000000000000000000000000000000000000000000000000000400C0000000100;
      ascon_cipher_state == 3'd3:
	  ascon_cipher_asconState_D_IN =
	      MUX_ascon_cipher_asconState_write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_get_inlayer:
	  ascon_cipher_asconState_D_IN =
	      MUX_ascon_cipher_asconState_write_1__VAL_3;
      default: ascon_cipher_asconState_D_IN =
		   320'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_cipher_asconState_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29] &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     ascon_cipher_state == 3'd3 ||
	     WILL_FIRE_RL_ascon_rl_get_inlayer ;

  // register ascon_cipher_first_block
  assign ascon_cipher_first_block_D_IN =
	     MUX_ascon_cipher_first_block_write_1__SEL_1 ||
	     MUX_ascon_cipher_first_block_write_1__VAL_2 ;
  assign ascon_cipher_first_block_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     WILL_FIRE_RL_ascon_rl_get_inlayer ;

  // register ascon_cipher_keyStore
  assign ascon_cipher_keyStore_D_IN =
	     { lwc_sdiReceiver_fifof_rv[31:0],
	       ascon_cipher_keyStore[127:32] } ;
  assign ascon_cipher_keyStore_EN = WILL_FIRE_RL_lwc_get_key_data ;

  // register ascon_cipher_loadNonceCounter
  assign ascon_cipher_loadNonceCounter_D_IN =
	     MUX_ascon_cipher_loadNonceCounter_write_1__SEL_1 &&
	     MUX_ascon_cipher_loadNonceCounter_write_1__VAL_1 ;
  assign ascon_cipher_loadNonceCounter_EN =
	     WILL_FIRE_RL_ascon_rl_get_inlayer && ascon_bdiFlags[6] ||
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ;

  // register ascon_cipher_postPermuteState
  always@(MUX_ascon_cipher_first_block_write_1__SEL_1 or
	  WILL_FIRE_RL_ascon_rl_get_inlayer or
	  MUX_ascon_cipher_postPermuteState_write_1__VAL_2 or
	  WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_cipher_first_block_write_1__SEL_1:
	  ascon_cipher_postPermuteState_D_IN = 3'd2;
      WILL_FIRE_RL_ascon_rl_get_inlayer:
	  ascon_cipher_postPermuteState_D_IN =
	      MUX_ascon_cipher_postPermuteState_write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest:
	  ascon_cipher_postPermuteState_D_IN = 3'd4;
      default: ascon_cipher_postPermuteState_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_cipher_postPermuteState_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     WILL_FIRE_RL_ascon_rl_get_inlayer ||
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest ;

  // register ascon_cipher_roundConstant
  always@(ascon_cipher_state or
	  MUX_ascon_cipher_roundConstant_write_1__VAL_2 or
	  WILL_FIRE_RL_ascon_rl_get_inlayer or
	  MUX_ascon_cipher_roundConstant_write_1__VAL_3 or
	  MUX_ascon_cipher_asconState_write_1__SEL_1 or
	  WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest)
  begin
    case (1'b1) // synopsys parallel_case
      ascon_cipher_state == 3'd3:
	  ascon_cipher_roundConstant_D_IN =
	      MUX_ascon_cipher_roundConstant_write_1__VAL_2;
      WILL_FIRE_RL_ascon_rl_get_inlayer:
	  ascon_cipher_roundConstant_D_IN =
	      MUX_ascon_cipher_roundConstant_write_1__VAL_3;
      MUX_ascon_cipher_asconState_write_1__SEL_1 ||
      WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest:
	  ascon_cipher_roundConstant_D_IN = 8'hF0;
      default: ascon_cipher_roundConstant_D_IN =
		   8'bxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_cipher_roundConstant_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29] &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     ascon_cipher_state == 3'd3 ||
	     WILL_FIRE_RL_ascon_rl_get_inlayer ||
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest ;

  // register ascon_cipher_roundCounter
  always@(WILL_FIRE_RL_ascon_rl_get_inlayer or
	  MUX_ascon_cipher_roundCounter_write_1__VAL_2 or
	  ascon_cipher_state or
	  MUX_ascon_cipher_roundCounter_write_1__VAL_3 or
	  MUX_ascon_cipher_first_block_write_1__SEL_1 or
	  WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_ascon_rl_get_inlayer:
	  ascon_cipher_roundCounter_D_IN =
	      MUX_ascon_cipher_roundCounter_write_1__VAL_2;
      ascon_cipher_state == 3'd3:
	  ascon_cipher_roundCounter_D_IN =
	      MUX_ascon_cipher_roundCounter_write_1__VAL_3;
      MUX_ascon_cipher_first_block_write_1__SEL_1 ||
      WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest:
	  ascon_cipher_roundCounter_D_IN = 3'd0;
      default: ascon_cipher_roundCounter_D_IN =
		   3'bxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_cipher_roundCounter_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     WILL_FIRE_RL_ascon_rl_get_inlayer ||
	     ascon_cipher_state == 3'd3 ||
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest ;

  // register ascon_cipher_squeezeCounter
  assign ascon_cipher_squeezeCounter_D_IN =
	     MUX_ascon_cipher_first_block_write_1__SEL_1 ?
	       2'd0 :
	       MUX_ascon_cipher_squeezeCounter_write_1__VAL_2 ;
  assign ascon_cipher_squeezeCounter_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest ;

  // register ascon_cipher_squeezeHash
  assign ascon_cipher_squeezeHash_D_IN = ascon_bdiFlags[2] ;
  assign ascon_cipher_squeezeHash_EN = WILL_FIRE_RL_ascon_rl_get_inlayer ;

  // register ascon_cipher_state
  always@(MUX_ascon_cipher_first_block_write_1__SEL_1 or
	  MUX_ascon_cipher_state_write_1__VAL_1 or
	  MUX_ascon_cipher_state_write_1__SEL_2 or
	  ascon_cipher_postPermuteState or
	  MUX_ascon_cipher_state_write_1__SEL_3 or
	  MUX_ascon_cipher_state_write_1__SEL_4 or
	  MUX_ascon_cipher_state_write_1__VAL_4 or
	  MUX_ascon_cipher_state_write_1__SEL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_ascon_cipher_first_block_write_1__SEL_1:
	  ascon_cipher_state_D_IN = MUX_ascon_cipher_state_write_1__VAL_1;
      MUX_ascon_cipher_state_write_1__SEL_2:
	  ascon_cipher_state_D_IN = ascon_cipher_postPermuteState;
      MUX_ascon_cipher_state_write_1__SEL_3: ascon_cipher_state_D_IN = 3'd3;
      MUX_ascon_cipher_state_write_1__SEL_4:
	  ascon_cipher_state_D_IN = MUX_ascon_cipher_state_write_1__VAL_4;
      MUX_ascon_cipher_state_write_1__SEL_5: ascon_cipher_state_D_IN = 3'd2;
      default: ascon_cipher_state_D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign ascon_cipher_state_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     ascon_cipher_state == 3'd3 &&
	     ascon_cipher_roundCounter == 3'd5 ||
	     WILL_FIRE_RL_ascon_rl_get_inlayer &&
	     (!ascon_bdiFlags[5] && !ascon_bdiFlags[6] ||
	      NOT_ascon_cipher_first_block_57_80_AND_NOT_asc_ETC___d346) ||
	     WILL_FIRE_RL_ascon_rl_squeeze_tag_or_digest &&
	     (ascon_cipher_squeezeCounter[0] || ascon_cipher_squeezeHash) ||
	     WILL_FIRE_RL_lwc_get_key_data && lwc_sdiCounter == 32'd0 ;

  // register ascon_inLayer_block
  assign ascon_inLayer_block_D_IN =
	     (WILL_FIRE_RL_ascon_rl_get_inlayer ||
	      ascon_inLayer_counter == 2'd0) ?
	       { 32'd0, ascon_inLayer_enq_wire_wget[35:4] } :
	       { (ascon_inLayer_counter == 2'd1) ?
		   ascon_inLayer_enq_wire_wget[35:4] :
		   ascon_inLayer_block[63:32],
		 ascon_inLayer_block[31:0] } ;
  assign ascon_inLayer_block_EN =
	     WILL_FIRE_RL_ascon_inLayer_rl_enq_deq &&
	     ascon_inLayer_enq_wire_whas ;

  // register ascon_inLayer_closed
  assign ascon_inLayer_closed_D_IN =
	     ascon_inLayer_enq_wire_whas && ascon_inLayer_do_close_whas ;
  assign ascon_inLayer_closed_EN = WILL_FIRE_RL_ascon_inLayer_rl_enq_deq ;

  // register ascon_inLayer_counter
  assign ascon_inLayer_counter_D_IN =
	     ascon_inLayer_enq_wire_whas ? x__h11719 : 2'd0 ;
  assign ascon_inLayer_counter_EN = WILL_FIRE_RL_ascon_inLayer_rl_enq_deq ;

  // register ascon_inLayer_needsPad
  assign ascon_inLayer_needsPad_D_IN =
	     MUX_ascon_inLayer_needsPad_write_1__SEL_1 ;
  assign ascon_inLayer_needsPad_EN =
	     MUX_ascon_inLayer_needsPad_write_1__SEL_1 ||
	     WILL_FIRE_RL_ascon_inLayer_rl_pad ;

  // register ascon_inLayer_valids
  assign ascon_inLayer_valids_D_IN =
	     (WILL_FIRE_RL_ascon_rl_get_inlayer ||
	      ascon_inLayer_counter == 2'd0) ?
	       { 4'd0, ascon_inLayer_enq_wire_wget[3:0] } :
	       { (ascon_inLayer_counter == 2'd1) ?
		   ascon_inLayer_enq_wire_wget[3:0] :
		   ascon_inLayer_valids[7:4],
		 ascon_inLayer_valids[3:0] } ;
  assign ascon_inLayer_valids_EN =
	     WILL_FIRE_RL_ascon_inLayer_rl_enq_deq &&
	     ascon_inLayer_enq_wire_whas ;

  // register ascon_outLayer_blockVec
  assign ascon_outLayer_blockVec_D_IN =
	     ascon_outLayer_enq_wire_whas ?
	       ascon_outLayer_enq_wire_wget[71:8] :
	       {2{ascon_outLayer_blockVec[63:32]}} ;
  assign ascon_outLayer_blockVec_EN =
	     ascon_outLayer_do_deq_whas || ascon_outLayer_enq_wire_whas ;

  // register ascon_outLayer_validsVec
  assign ascon_outLayer_validsVec_D_IN =
	     ascon_outLayer_enq_wire_whas ?
	       ascon_outLayer_enq_wire_wget[7:0] :
	       { 4'd0, ascon_outLayer_validsVec[7:4] } ;
  assign ascon_outLayer_validsVec_EN =
	     ascon_outLayer_do_deq_whas || ascon_outLayer_enq_wire_whas ;

  // register lwc_doSender_data_reg
  always@(WILL_FIRE_RL_lwc_out_header or
	  MUX_lwc_doSender_data_reg_write_1__VAL_1 or
	  WILL_FIRE_RL_lwc_sendout_data or
	  MUX_lwc_doSender_data_reg_write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_out_status or
	  MUX_lwc_doSender_data_reg_write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_lwc_out_header:
	  lwc_doSender_data_reg_D_IN =
	      MUX_lwc_doSender_data_reg_write_1__VAL_1;
      WILL_FIRE_RL_lwc_sendout_data:
	  lwc_doSender_data_reg_D_IN =
	      MUX_lwc_doSender_data_reg_write_1__VAL_2;
      WILL_FIRE_RL_lwc_out_status:
	  lwc_doSender_data_reg_D_IN =
	      MUX_lwc_doSender_data_reg_write_1__VAL_3;
      default: lwc_doSender_data_reg_D_IN =
		   33'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_doSender_data_reg_EN =
	     WILL_FIRE_RL_lwc_out_header || WILL_FIRE_RL_lwc_sendout_data ||
	     WILL_FIRE_RL_lwc_out_status ;

  // register lwc_doSender_data_valid
  assign lwc_doSender_data_valid_D_IN = lwc_doSender_do_enq_whas ;
  assign lwc_doSender_data_valid_EN = do_ready || lwc_doSender_do_enq_whas ;

  // register lwc_finalRemainBytes
  assign lwc_finalRemainBytes_D_IN =
	     lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[1:0] ;
  assign lwc_finalRemainBytes_EN = WILL_FIRE_RL_lwc_get_pdi_header ;

  // register lwc_headersFifo_rv
  assign lwc_headersFifo_rv_D_IN = lwc_headersFifo_rv_port2__read ;
  assign lwc_headersFifo_rv_EN = 1'b1 ;

  // register lwc_inFlags
  assign lwc_inFlags_D_IN =
	     { lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31],
	       !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30],
	       !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[28] &&
	       !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31],
	       lwc_pdiReceiver_fifof_rv[31:28] == 4'b1010,
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:29] == 3'b010 &&
	       (lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[28] ||
		lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31]),
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:29] == 3'b010,
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[29],
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[15:0] == 16'd0,
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[24] ||
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[25] &&
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:29] == 3'b010 &&
	       (lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[28] ||
		lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31]) } ;
  assign lwc_inFlags_EN = WILL_FIRE_RL_lwc_get_pdi_header ;

  // register lwc_inSegEoT
  assign lwc_inSegEoT_D_IN = lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[25] ;
  assign lwc_inSegEoT_EN = WILL_FIRE_RL_lwc_get_pdi_header ;

  // register lwc_inSegLast
  assign lwc_inSegLast_D_IN = lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[24] ;
  assign lwc_inSegLast_EN = WILL_FIRE_RL_lwc_get_pdi_header ;

  // register lwc_op_decrypt
  assign lwc_op_decrypt_D_IN =
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] &&
	     lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[28] ;
  assign lwc_op_decrypt_EN = WILL_FIRE_RL_lwc_pdi_instruction ;

  // register lwc_outCounter
  always@(MUX_lwc_outCounter_write_1__SEL_1 or
	  MUX_lwc_outCounter_write_1__VAL_1 or
	  MUX_lwc_outCounter_write_1__SEL_2 or
	  MUX_lwc_outCounter_write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_verify_tag or x__h52158)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_outCounter_write_1__SEL_1:
	  lwc_outCounter_D_IN = MUX_lwc_outCounter_write_1__VAL_1;
      MUX_lwc_outCounter_write_1__SEL_2:
	  lwc_outCounter_D_IN = MUX_lwc_outCounter_write_1__VAL_2;
      WILL_FIRE_RL_lwc_verify_tag: lwc_outCounter_D_IN = x__h52158;
      default: lwc_outCounter_D_IN =
		   14'bxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_outCounter_EN =
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q4[15:0] != 16'd0 ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[31]) ||
	     WILL_FIRE_RL_lwc_sendout_data &&
	     NOT_lwc_outCounter_44_BITS_13_TO_1_77_EQ_0_78__ETC___d696 ||
	     WILL_FIRE_RL_lwc_verify_tag ;

  // register lwc_outRemainder
  assign lwc_outRemainder_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q4[1:0] ;
  assign lwc_outRemainder_EN = WILL_FIRE_RL_lwc_out_header ;

  // register lwc_outSegLast
  assign lwc_outSegLast_D_IN = lwc_headersFifo_rv_BITS_31_TO_0__q4[24] ;
  assign lwc_outSegLast_EN = WILL_FIRE_RL_lwc_out_header ;

  // register lwc_outSegPt
  assign lwc_outSegPt_D_IN =
	     !lwc_headersFifo_rv_BITS_31_TO_0__q4[28] &&
	     !lwc_headersFifo_rv_BITS_31_TO_0__q4[31] ;
  assign lwc_outSegPt_EN = WILL_FIRE_RL_lwc_out_header ;

  // register lwc_outState
  always@(MUX_lwc_outState_write_1__SEL_1 or
	  MUX_lwc_outState_write_1__SEL_2 or
	  MUX_lwc_outState_write_1__VAL_2 or
	  MUX_lwc_outState_write_1__SEL_3 or
	  MUX_lwc_outState_write_1__VAL_3 or WILL_FIRE_RL_lwc_out_status)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_outState_write_1__SEL_1: lwc_outState_D_IN = 2'd3;
      MUX_lwc_outState_write_1__SEL_2:
	  lwc_outState_D_IN = MUX_lwc_outState_write_1__VAL_2;
      MUX_lwc_outState_write_1__SEL_3:
	  lwc_outState_D_IN = MUX_lwc_outState_write_1__VAL_3;
      WILL_FIRE_RL_lwc_out_status: lwc_outState_D_IN = 2'd0;
      default: lwc_outState_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign lwc_outState_EN =
	     WILL_FIRE_RL_lwc_verify_tag && lwc_outCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_sendout_data &&
	     (lwc_outCounter[13:1] == 13'd0 && !lwc_outCounter[0] ||
	      lwc_outRemainder == 2'd0 && lwc_outCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_out_header &&
	     (lwc_headersFifo_rv_BITS_31_TO_0__q4[15:0] != 16'd0 ||
	      lwc_headersFifo_rv_BITS_31_TO_0__q4[24] ||
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[28] &&
	      !lwc_headersFifo_rv_BITS_31_TO_0__q4[31]) ||
	     WILL_FIRE_RL_lwc_out_status ;

  // register lwc_pdiCounter
  assign lwc_pdiCounter_D_IN =
	     MUX_lwc_pdiCounter_write_1__SEL_1 ?
	       MUX_lwc_pdiCounter_write_1__VAL_1 :
	       lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[15:2] ;
  assign lwc_pdiCounter_EN =
	     WILL_FIRE_RL_lwc_get_tag_data || WILL_FIRE_RL_lwc_get_pdi_data ||
	     WILL_FIRE_RL_lwc_get_tag_header ||
	     WILL_FIRE_RL_lwc_get_pdi_header ;

  // register lwc_pdiReceiver_fifof_rv
  assign lwc_pdiReceiver_fifof_rv_D_IN =
	     lwc_pdiReceiver_fifof_rv_port2__read ;
  assign lwc_pdiReceiver_fifof_rv_EN = 1'b1 ;

  // register lwc_pdiState
  always@(MUX_lwc_pdiState_write_1__SEL_3 or
	  MUX_lwc_pdiState_write_1__VAL_3 or
	  WILL_FIRE_RL_lwc_send_empty_input or
	  MUX_lwc_pdiState_write_1__VAL_4 or
	  WILL_FIRE_RL_lwc_get_pdi_header or
	  MUX_lwc_pdiState_write_1__VAL_5 or
	  MUX_lwc_pdiState_write_1__SEL_2 or
	  WILL_FIRE_RL_lwc_enq_tag or
	  MUX_ascon_cipher_first_block_write_1__SEL_1 or
	  WILL_FIRE_RL_lwc_get_tag_header)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_pdiState_write_1__SEL_3:
	  lwc_pdiState_D_IN = MUX_lwc_pdiState_write_1__VAL_3;
      WILL_FIRE_RL_lwc_send_empty_input:
	  lwc_pdiState_D_IN = MUX_lwc_pdiState_write_1__VAL_4;
      WILL_FIRE_RL_lwc_get_pdi_header:
	  lwc_pdiState_D_IN = MUX_lwc_pdiState_write_1__VAL_5;
      MUX_lwc_pdiState_write_1__SEL_2 || WILL_FIRE_RL_lwc_enq_tag:
	  lwc_pdiState_D_IN = 3'd0;
      MUX_ascon_cipher_first_block_write_1__SEL_1: lwc_pdiState_D_IN = 3'd1;
      WILL_FIRE_RL_lwc_get_tag_header: lwc_pdiState_D_IN = 3'd4;
      default: lwc_pdiState_D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign lwc_pdiState_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     !lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     WILL_FIRE_RL_lwc_get_tag_data && lwc_pdiCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_get_pdi_data &&
	     (lwc_pdiCounter[13:1] == 13'd0 && !lwc_pdiCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 &&
	      lwc_pdiCounter[13:1] == 13'd0) ||
	     WILL_FIRE_RL_lwc_send_empty_input ||
	     WILL_FIRE_RL_lwc_get_pdi_header ||
	     WILL_FIRE_RL_lwc_enq_tag ||
	     WILL_FIRE_RL_lwc_get_tag_header ;

  // register lwc_sdiCounter
  assign lwc_sdiCounter_D_IN =
	     WILL_FIRE_RL_lwc_get_key_data ?
	       MUX_lwc_sdiCounter_write_1__VAL_1 :
	       32'd3 ;
  assign lwc_sdiCounter_EN =
	     WILL_FIRE_RL_lwc_get_key_data ||
	     WILL_FIRE_RL_lwc_get_sdi_header ;

  // register lwc_sdiReceiver_fifof_rv
  assign lwc_sdiReceiver_fifof_rv_D_IN =
	     lwc_sdiReceiver_fifof_rv_port2__read ;
  assign lwc_sdiReceiver_fifof_rv_EN = 1'b1 ;

  // register lwc_sdiState
  always@(MUX_lwc_sdiState_write_1__SEL_1 or
	  MUX_ascon_cipher_state_write_1__SEL_5 or
	  WILL_FIRE_RL_lwc_get_sdi_inst or WILL_FIRE_RL_lwc_get_sdi_header)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_sdiState_write_1__SEL_1: lwc_sdiState_D_IN = 2'd1;
      MUX_ascon_cipher_state_write_1__SEL_5: lwc_sdiState_D_IN = 2'd0;
      WILL_FIRE_RL_lwc_get_sdi_inst: lwc_sdiState_D_IN = 2'd2;
      WILL_FIRE_RL_lwc_get_sdi_header: lwc_sdiState_D_IN = 2'd3;
      default: lwc_sdiState_D_IN = 2'bxx /* unspecified value */ ;
    endcase
  end
  assign lwc_sdiState_EN =
	     WILL_FIRE_RL_lwc_pdi_instruction &&
	     lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[30] ||
	     WILL_FIRE_RL_lwc_get_key_data && lwc_sdiCounter == 32'd0 ||
	     WILL_FIRE_RL_lwc_get_sdi_inst ||
	     WILL_FIRE_RL_lwc_get_sdi_header ;

  // register lwc_statFailure
  assign lwc_statFailure_D_IN = MUX_lwc_statFailure_write_1__SEL_1 ;
  assign lwc_statFailure_EN =
	     WILL_FIRE_RL_lwc_verify_tag &&
	     NOT_IF_lwc_tagFifo_rv_port0__read__40_BIT_32_4_ETC___d676 ||
	     WILL_FIRE_RL_lwc_out_header ;

  // register lwc_tagFifo_rv
  assign lwc_tagFifo_rv_D_IN = lwc_tagFifo_rv_port2__read ;
  assign lwc_tagFifo_rv_EN = 1'b1 ;

  // remaining internal signals
  assign IF_NOT_ascon_bdiFlags_25_BIT_5_58_79_OR_NOT_as_ETC___d337 =
	     (!ascon_bdiFlags[5] || !ascon_cipher_first_block ||
	      ascon_inLayer_valids[0]) ?
	       { IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d288,
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[7:0],
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[15:8],
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[23:16],
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[31:24],
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[39:32],
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[47:40],
		 IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325[55:48] } :
	       ascon_cipher_asconState[63:0] ;
  assign IF_NOT_ascon_inLayer_needsPad_86_07_AND_ascon__ETC___d275 =
	     (!ascon_inLayer_needsPad && ascon_inLayer_closed &&
	      ascon_bdiFlags[3]) ?
	       ascon_cipher_asconState[191:128] ^
	       { ascon_cipher_keyStore[95:64],
		 ascon_cipher_keyStore[127:96] } :
	       ascon_cipher_asconState[191:128] ;
  assign IF_NOT_ascon_inLayer_needsPad_86_07_AND_ascon__ETC___d278 =
	     (!ascon_inLayer_needsPad && ascon_inLayer_closed &&
	      ascon_bdiFlags[3]) ?
	       ascon_cipher_asconState[127:64] ^
	       { ascon_cipher_keyStore[31:0], ascon_cipher_keyStore[63:32] } :
	       ascon_cipher_asconState[127:64] ;
  assign IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d288 =
	     ascon_bdiFlags[4] ?
	       (ascon_inLayer_valids[0] ?
		  ascon_inLayer_block[7:0] :
		  ascon_inLayer_block_70_BITS_7_TO_0_29_XOR_asco_ETC___d286) :
	       ascon_inLayer_block_70_BITS_7_TO_0_29_XOR_asco_ETC___d286 ;
  assign IF_ascon_bdiFlags_25_BIT_4_84_THEN_IF_ascon_in_ETC___d325 =
	     ascon_bdiFlags[4] ?
	       IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d324 :
	       ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301 ;
  assign IF_ascon_bdiFlags_25_BIT_5_58_AND_ascon_cipher_ETC___d270 =
	     (ascon_bdiFlags[5] && ascon_cipher_first_block) ?
	       ascon_cipher_asconState[255:192] ^
	       { ascon_cipher_keyStore[31:0], ascon_cipher_keyStore[63:32] } :
	       ascon_cipher_asconState[255:192] ;
  assign IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d261 =
	     (ascon_cipher_first_block && ascon_bdiFlags[5]) ?
	       ascon_cipher_asconState[319:256] ^
	       { ascon_cipher_keyStore[95:64],
		 ascon_cipher_keyStore[127:96] } :
	       ascon_cipher_asconState[319:256] ;
  assign IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d276 =
	     { IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d261[63:1],
	       IF_ascon_cipher_first_block_57_AND_ascon_bdiFl_ETC___d261[0] ^
	       (ascon_bdiFlags[3] && ascon_cipher_first_block),
	       IF_ascon_bdiFlags_25_BIT_5_58_AND_ascon_cipher_ETC___d270,
	       IF_NOT_ascon_inLayer_needsPad_86_07_AND_ascon__ETC___d275 } ;
  assign IF_ascon_cipher_loadNonceCounter_28_THEN_ascon_ETC___d256 =
	     ascon_cipher_loadNonceCounter ?
	       { ascon_inLayer_block[7:0],
		 ascon_inLayer_block[15:8],
		 ascon_inLayer_block[23:16],
		 ascon_inLayer_block[31:24],
		 ascon_inLayer_block[39:32],
		 ascon_inLayer_block[47:40],
		 ascon_inLayer_block[55:48],
		 ascon_inLayer_block[63:56],
		 ascon_cipher_asconState[255:192],
		 ascon_cipher_keyStore[95:64],
		 ascon_cipher_keyStore[127:96],
		 ascon_cipher_keyStore[31:0],
		 ascon_cipher_keyStore[63:32],
		 64'h80400C0600000000 } :
	       { ascon_cipher_asconState[319:256],
		 ascon_inLayer_block[7:0],
		 ascon_inLayer_block[15:8],
		 ascon_inLayer_block[23:16],
		 ascon_inLayer_block[31:24],
		 ascon_inLayer_block[39:32],
		 ascon_inLayer_block[47:40],
		 ascon_inLayer_block[55:48],
		 ascon_inLayer_block[63:56],
		 ascon_cipher_asconState[191:0] } ;
  assign IF_ascon_cipher_squeezeHash_73_THEN_ascon_ciph_ETC___d387 =
	     ascon_cipher_squeezeHash ?
	       ascon_cipher_asconState[63:0] :
	       CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 ^
	       CASE_ascon_cipher_squeezeCounter_BIT_0_0_ascon_ETC__q3 ;
  assign IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d310 =
	     { ascon_inLayer_valids[7] ?
		 ascon_inLayer_block[63:56] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[55:48],
	       ascon_inLayer_valids[6] ?
		 ascon_inLayer_block[55:48] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[47:40],
	       ascon_inLayer_valids[5] ?
		 ascon_inLayer_block[47:40] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[39:32] } ;
  assign IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d317 =
	     { IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d310,
	       ascon_inLayer_valids[4] ?
		 ascon_inLayer_block[39:32] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[31:24],
	       ascon_inLayer_valids[3] ?
		 ascon_inLayer_block[31:24] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[23:16] } ;
  assign IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d324 =
	     { IF_ascon_inLayer_valids_78_BIT_7_89_THEN_ascon_ETC___d317,
	       ascon_inLayer_valids[2] ?
		 ascon_inLayer_block[23:16] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[15:8],
	       ascon_inLayer_valids[1] ?
		 ascon_inLayer_block[15:8] :
		 ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301[7:0] } ;
  assign INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d100 =
	     { INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d90[63:8],
	       spliced_bits__h5981 } ^
	     ascon_cipher_asconState_BITS_127_TO_64_0_XOR_I_ETC___d68 ;
  assign INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d103 =
	     INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d100 ^
	     ~ascon_cipher_asconState_BITS_255_TO_192_XOR_IN_ETC___d41 &
	     ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d42 ;
  assign INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d90 =
	     x__h6025 ^ y__h6026 ;
  assign NOT_IF_lwc_tagFifo_rv_port0__read__40_BIT_32_4_ETC___d676 =
	     lwc_tagFifo_rv[31:0] != sw__h48418 ;
  assign NOT_ascon_cipher_first_block_57_80_AND_NOT_asc_ETC___d346 =
	     !ascon_cipher_first_block && !ascon_bdiFlags[6] ||
	     ascon_inLayer_valids[0] && !ascon_bdiFlags[6] ||
	     ascon_cipher_loadNonceCounter && ascon_bdiFlags[6] ;
  assign NOT_lwc_outCounter_44_BITS_13_TO_1_77_EQ_0_78__ETC___d696 =
	     lwc_outCounter[13:1] != 13'd0 ||
	     lwc_outRemainder != 2'd0 && lwc_outCounter[0] ||
	     lwc_outSegPt && lwc_outSegLast ;
  assign _dand2ascon_inLayer_do_close_EN_wset =
	     WILL_FIRE_RL_lwc_get_pdi_data &&
	     (lwc_pdiCounter[13:1] == 13'd0 && !lwc_inFlags[8] &&
	      lwc_inSegEoT &&
	      !lwc_pdiCounter[0] ||
	      lwc_finalRemainBytes == 2'd0 && lwc_pdiCounter[13:1] == 13'd0 &&
	      !lwc_inFlags[8] &&
	      lwc_inSegEoT) ;
  assign a__h45196 = oh__h45135 - 4'd1 ;
  assign ascon_cipher_asconState_BITS_127_TO_64_0_XOR_I_ETC___d68 =
	     x__h6177 ^ y__h6178 ;
  assign ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d29 =
	     { ascon_cipher_asconState[191:136], spliced_bits__h2738 } ^
	     ascon_cipher_asconState[127:64] ;
  assign ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d32 =
	     ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d29 ^
	     ~ascon_cipher_asconState[255:192] &
	     ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d6 ;
  assign ascon_cipher_asconState_BITS_255_TO_192_XOR_IN_ETC___d41 =
	     x__h5776 ^ y__h5777 ;
  assign ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d122 =
	     { x__h1212 ^ y__h1213,
	       x__h9262 ^ y__h9263,
	       x__h9417 ^ y__h9418 } ;
  assign ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d20 =
	     x__h1890 ^ y__h1891 ;
  assign ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d42 =
	     ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d20 ^
	     ascon_cipher_asconState_BITS_255_TO_192_XOR_IN_ETC___d41 ;
  assign ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d6 =
	     ascon_cipher_asconState[319:256] ^
	     ascon_cipher_asconState[255:192] ;
  assign ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d128 =
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d55 ^
	     ~ascon_cipher_asconState_BITS_127_TO_64_0_XOR_I_ETC___d68 &
	     INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d100 ;
  assign ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d45 =
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d8 ^
	     ~ascon_cipher_asconState[127:64] &
	     ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d29 ;
  assign ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d55 =
	     x__h6390 ^ y__h6391 ^
	     ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d20 ;
  assign ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d8 =
	     ascon_cipher_asconState[63:0] ^
	     ascon_cipher_asconState[319:256] ;
  assign ascon_cipher_roundConstant_6_BITS_7_TO_4_3_MIN_ETC___d94 =
	     ascon_cipher_roundConstant[7:4] - 4'd1 ;
  assign ascon_inLayer_block_70_BITS_63_TO_8_90_XOR_asc_ETC___d301 =
	     ascon_inLayer_block[63:8] ^
	     { ascon_cipher_asconState[7:0],
	       ascon_cipher_asconState[15:8],
	       ascon_cipher_asconState[23:16],
	       ascon_cipher_asconState[31:24],
	       ascon_cipher_asconState[39:32],
	       ascon_cipher_asconState[47:40],
	       ascon_cipher_asconState[55:48] } ;
  assign ascon_inLayer_block_70_BITS_7_TO_0_29_XOR_asco_ETC___d286 =
	     ascon_inLayer_block[7:0] ^ ascon_cipher_asconState[63:56] ;
  assign ascon_outLayer_validsVec_98_BITS_3_TO_0_02_EQ__ETC___d221 =
	     ascon_outLayer_validsVec[3:0] == 4'd0 &&
	     ascon_cipher_state == 3'd2 &&
	     !ascon_inLayer_needsPad &&
	     ascon_inLayer_closed ||
	     ascon_inLayer_counter == 2'd2 &&
	     ascon_outLayer_validsVec[7:4] == 4'd0 &&
	     ascon_cipher_state == 3'd2 &&
	     ascon_outLayer_do_deq_whas ||
	     ascon_outLayer_validsVec[7:4] == 4'd0 &&
	     ascon_cipher_state == 3'd2 &&
	     !ascon_inLayer_needsPad &&
	     ascon_inLayer_closed &&
	     ascon_outLayer_do_deq_whas ;
  assign b__h49591 =
	     ascon_outLayer_validsVec[3] ?
	       ascon_outLayer_blockVec[31:24] :
	       8'd0 ;
  assign b__h50775 =
	     ascon_outLayer_validsVec[2] ?
	       ascon_outLayer_blockVec[23:16] :
	       8'd0 ;
  assign b__h50887 =
	     ascon_outLayer_validsVec[1] ?
	       ascon_outLayer_blockVec[15:8] :
	       8'd0 ;
  assign b__h50999 =
	     ascon_outLayer_validsVec[0] ?
	       ascon_outLayer_blockVec[7:0] :
	       8'd0 ;
  assign lwc_headersFifo_rv_BITS_31_TO_0__q4 = lwc_headersFifo_rv[31:0] ;
  assign lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1 =
	     lwc_pdiReceiver_fifof_rv[31:0] ;
  assign oh__h45135 =
	     { lwc_finalRemainBytes == 2'd3,
	       lwc_finalRemainBytes == 2'd2,
	       lwc_finalRemainBytes == 2'd1,
	       lwc_finalRemainBytes == 2'd0 } ;
  assign spliced_bits__h2738 =
	     ascon_cipher_asconState[135:128] ^ ascon_cipher_roundConstant ;
  assign spliced_bits__h5981 =
	     INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d90[7:0] ^
	     { ascon_cipher_roundConstant_6_BITS_7_TO_4_3_MIN_ETC___d94,
	       ascon_cipher_roundConstant[3:0] + 4'd1 } ;
  assign sw__h48418 =
	     { (ascon_outLayer_validsVec[7:4] != 4'd0 ||
		ascon_outLayer_validsVec[0] ||
		ascon_outLayer_validsVec[3:0] == 4'd0) ?
		 b__h50999 :
		 8'd0,
	       (ascon_outLayer_validsVec[7:4] != 4'd0 ||
		ascon_outLayer_validsVec[1] ||
		ascon_outLayer_validsVec[3:0] == 4'd0) ?
		 b__h50887 :
		 8'd0,
	       (ascon_outLayer_validsVec[7:4] != 4'd0 ||
		ascon_outLayer_validsVec[2] ||
		ascon_outLayer_validsVec[3:0] == 4'd0) ?
		 b__h50775 :
		 8'd0,
	       (ascon_outLayer_validsVec[7:4] != 4'd0 ||
		ascon_outLayer_validsVec[3] ||
		ascon_outLayer_validsVec[3:0] == 4'd0) ?
		 b__h49591 :
		 8'd0 } ;
  assign valid_bytes__h44407 =
	     (lwc_pdiCounter[13:1] != 13'd0 || !lwc_inSegEoT ||
	      lwc_pdiCounter[0] ||
	      lwc_finalRemainBytes == 2'd0) ?
	       4'd15 :
	       a__h45196 ;
  assign x__h11719 =
	     WILL_FIRE_RL_ascon_rl_get_inlayer ?
	       2'd1 :
	       ascon_inLayer_counter + 2'd1 ;
  assign x__h1212 = x__h1214 ^ y__h1215 ;
  assign x__h1214 =
	     ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d42 ^
	     ~ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d55 &
	     ascon_cipher_asconState_BITS_127_TO_64_0_XOR_I_ETC___d68 ;
  assign x__h1890 = x__h1892 ^ y__h1893 ;
  assign x__h1892 =
	     ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d6 ^
	     ~ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d8 &
	     ascon_cipher_asconState[127:64] ;
  assign x__h45818 =
	     { valid_bytes__h44407[3] ?
		 lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[7:0] :
		 (valid_bytes__h44407[2] ? 8'h80 : 8'd0),
	       valid_bytes__h44407[2] ?
		 lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[15:8] :
		 (valid_bytes__h44407[1] ? 8'h80 : 8'd0),
	       valid_bytes__h44407[1] ?
		 lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[23:16] :
		 (valid_bytes__h44407[0] ? 8'h80 : 8'd0),
	       valid_bytes__h44407[0] ?
		 lwc_pdiReceiver_fifof_rv_BITS_31_TO_0__q1[31:24] :
		 8'h80 } ;
  assign x__h52158 = lwc_outCounter - 14'd1 ;
  assign x__h5776 = x__h5778 ^ y__h5779 ;
  assign x__h5778 =
	     ascon_cipher_asconState[255:192] ^
	     ~ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d6 &
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d8 ^
	     ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d32 ;
  assign x__h6025 = x__h6027 ^ y__h6028 ;
  assign x__h6027 =
	     ~ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d32 ;
  assign x__h6177 = x__h6179 ^ y__h6180 ;
  assign x__h6179 =
	     ascon_cipher_asconState[127:64] ^
	     ~ascon_cipher_asconState_BITS_191_TO_136_4_CONC_ETC___d29 &
	     ascon_cipher_asconState[255:192] ^
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d45 ;
  assign x__h6390 = x__h6392 ^ y__h6393 ;
  assign x__h6392 =
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d45 ^
	     x__h1892 ;
  assign x__h9262 = x__h9264 ^ y__h9265 ;
  assign x__h9264 =
	     ascon_cipher_asconState_BITS_255_TO_192_XOR_IN_ETC___d41 ^
	     ~ascon_cipher_asconState_BITS_319_TO_256_XOR_as_ETC___d42 &
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d55 ^
	     INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d103 ;
  assign x__h9417 = x__h9419 ^ y__h9420 ;
  assign x__h9419 =
	     ~INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d103 ;
  assign x__h9521 = x__h9523 ^ y__h9524 ;
  assign x__h9523 =
	     ascon_cipher_asconState_BITS_127_TO_64_0_XOR_I_ETC___d68 ^
	     ~INV_ascon_cipher_asconState_BITS_191_TO_136_4__ETC___d100 &
	     ascon_cipher_asconState_BITS_255_TO_192_XOR_IN_ETC___d41 ^
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d128 ;
  assign x__h9676 = x__h9678 ^ y__h9679 ;
  assign x__h9678 =
	     ascon_cipher_asconState_BITS_63_TO_0_XOR_ascon_ETC___d128 ^
	     x__h1214 ;
  assign y__h1213 = { x__h1214[40:0], x__h1214[63:41] } ;
  assign y__h1215 = { x__h1214[6:0], x__h1214[63:7] } ;
  assign y__h1891 = { x__h1892[40:0], x__h1892[63:41] } ;
  assign y__h1893 = { x__h1892[6:0], x__h1892[63:7] } ;
  assign y__h5777 = { x__h5778[16:0], x__h5778[63:17] } ;
  assign y__h5779 = { x__h5778[9:0], x__h5778[63:10] } ;
  assign y__h6026 = { x__h6027[5:0], x__h6027[63:6] } ;
  assign y__h6028 = { x__h6027[0], x__h6027[63:1] } ;
  assign y__h6178 = { x__h6179[38:0], x__h6179[63:39] } ;
  assign y__h6180 = { x__h6179[60:0], x__h6179[63:61] } ;
  assign y__h6391 = { x__h6392[27:0], x__h6392[63:28] } ;
  assign y__h6393 = { x__h6392[18:0], x__h6392[63:19] } ;
  assign y__h9263 = { x__h9264[16:0], x__h9264[63:17] } ;
  assign y__h9265 = { x__h9264[9:0], x__h9264[63:10] } ;
  assign y__h9418 = { x__h9419[5:0], x__h9419[63:6] } ;
  assign y__h9420 = { x__h9419[0], x__h9419[63:1] } ;
  assign y__h9522 = { x__h9523[38:0], x__h9523[63:39] } ;
  assign y__h9524 = { x__h9523[60:0], x__h9523[63:61] } ;
  assign y__h9677 = { x__h9678[27:0], x__h9678[63:28] } ;
  assign y__h9679 = { x__h9678[18:0], x__h9678[63:19] } ;
  always@(ascon_cipher_squeezeCounter or ascon_cipher_asconState)
  begin
    case (ascon_cipher_squeezeCounter[0] ? 32'd4 : 32'd3)
      32'd0:
	  CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 =
	      ascon_cipher_asconState[63:0];
      32'd1:
	  CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 =
	      ascon_cipher_asconState[127:64];
      32'd2:
	  CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 =
	      ascon_cipher_asconState[191:128];
      32'd3:
	  CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 =
	      ascon_cipher_asconState[255:192];
      32'd4:
	  CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 =
	      ascon_cipher_asconState[319:256];
      default: CASE_IF_ascon_cipher_squeezeCounter_BIT_0_THEN_ETC__q2 =
		   64'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(ascon_cipher_squeezeCounter or ascon_cipher_keyStore)
  begin
    case (ascon_cipher_squeezeCounter[0])
      1'd0:
	  CASE_ascon_cipher_squeezeCounter_BIT_0_0_ascon_ETC__q3 =
	      { ascon_cipher_keyStore[31:0], ascon_cipher_keyStore[63:32] };
      1'd1:
	  CASE_ascon_cipher_squeezeCounter_BIT_0_0_ascon_ETC__q3 =
	      { ascon_cipher_keyStore[95:64], ascon_cipher_keyStore[127:96] };
    endcase
  end

  // handling of inlined registers

  always@(posedge clk)
  begin
    if (rst == `BSV_RESET_VALUE)
      begin
        ascon_cipher_state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ascon_inLayer_closed <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ascon_inLayer_counter <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ascon_inLayer_needsPad <= `BSV_ASSIGNMENT_DELAY 1'd0;
	ascon_outLayer_validsVec <= `BSV_ASSIGNMENT_DELAY 8'd0;
	lwc_doSender_data_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	lwc_outState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_pdiReceiver_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	lwc_pdiState <= `BSV_ASSIGNMENT_DELAY 3'd0;
	lwc_sdiReceiver_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
	lwc_sdiState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY
	    { 1'd0,
	      32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */  };
      end
    else
      begin
        if (ascon_cipher_state_EN)
	  ascon_cipher_state <= `BSV_ASSIGNMENT_DELAY ascon_cipher_state_D_IN;
	if (ascon_inLayer_closed_EN)
	  ascon_inLayer_closed <= `BSV_ASSIGNMENT_DELAY
	      ascon_inLayer_closed_D_IN;
	if (ascon_inLayer_counter_EN)
	  ascon_inLayer_counter <= `BSV_ASSIGNMENT_DELAY
	      ascon_inLayer_counter_D_IN;
	if (ascon_inLayer_needsPad_EN)
	  ascon_inLayer_needsPad <= `BSV_ASSIGNMENT_DELAY
	      ascon_inLayer_needsPad_D_IN;
	if (ascon_outLayer_validsVec_EN)
	  ascon_outLayer_validsVec <= `BSV_ASSIGNMENT_DELAY
	      ascon_outLayer_validsVec_D_IN;
	if (lwc_doSender_data_valid_EN)
	  lwc_doSender_data_valid <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_data_valid_D_IN;
	if (lwc_headersFifo_rv_EN)
	  lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_headersFifo_rv_D_IN;
	if (lwc_outState_EN)
	  lwc_outState <= `BSV_ASSIGNMENT_DELAY lwc_outState_D_IN;
	if (lwc_pdiReceiver_fifof_rv_EN)
	  lwc_pdiReceiver_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      lwc_pdiReceiver_fifof_rv_D_IN;
	if (lwc_pdiState_EN)
	  lwc_pdiState <= `BSV_ASSIGNMENT_DELAY lwc_pdiState_D_IN;
	if (lwc_sdiReceiver_fifof_rv_EN)
	  lwc_sdiReceiver_fifof_rv <= `BSV_ASSIGNMENT_DELAY
	      lwc_sdiReceiver_fifof_rv_D_IN;
	if (lwc_sdiState_EN)
	  lwc_sdiState <= `BSV_ASSIGNMENT_DELAY lwc_sdiState_D_IN;
	if (lwc_tagFifo_rv_EN)
	  lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_tagFifo_rv_D_IN;
      end
    if (ascon_bdiFlags_EN)
      ascon_bdiFlags <= `BSV_ASSIGNMENT_DELAY ascon_bdiFlags_D_IN;
    if (ascon_cipher_asconState_EN)
      ascon_cipher_asconState <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_asconState_D_IN;
    if (ascon_cipher_first_block_EN)
      ascon_cipher_first_block <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_first_block_D_IN;
    if (ascon_cipher_keyStore_EN)
      ascon_cipher_keyStore <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_keyStore_D_IN;
    if (ascon_cipher_loadNonceCounter_EN)
      ascon_cipher_loadNonceCounter <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_loadNonceCounter_D_IN;
    if (ascon_cipher_postPermuteState_EN)
      ascon_cipher_postPermuteState <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_postPermuteState_D_IN;
    if (ascon_cipher_roundConstant_EN)
      ascon_cipher_roundConstant <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_roundConstant_D_IN;
    if (ascon_cipher_roundCounter_EN)
      ascon_cipher_roundCounter <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_roundCounter_D_IN;
    if (ascon_cipher_squeezeCounter_EN)
      ascon_cipher_squeezeCounter <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_squeezeCounter_D_IN;
    if (ascon_cipher_squeezeHash_EN)
      ascon_cipher_squeezeHash <= `BSV_ASSIGNMENT_DELAY
	  ascon_cipher_squeezeHash_D_IN;
    if (ascon_inLayer_block_EN)
      ascon_inLayer_block <= `BSV_ASSIGNMENT_DELAY ascon_inLayer_block_D_IN;
    if (ascon_inLayer_valids_EN)
      ascon_inLayer_valids <= `BSV_ASSIGNMENT_DELAY ascon_inLayer_valids_D_IN;
    if (ascon_outLayer_blockVec_EN)
      ascon_outLayer_blockVec <= `BSV_ASSIGNMENT_DELAY
	  ascon_outLayer_blockVec_D_IN;
    if (lwc_doSender_data_reg_EN)
      lwc_doSender_data_reg <= `BSV_ASSIGNMENT_DELAY
	  lwc_doSender_data_reg_D_IN;
    if (lwc_finalRemainBytes_EN)
      lwc_finalRemainBytes <= `BSV_ASSIGNMENT_DELAY lwc_finalRemainBytes_D_IN;
    if (lwc_inFlags_EN) lwc_inFlags <= `BSV_ASSIGNMENT_DELAY lwc_inFlags_D_IN;
    if (lwc_inSegEoT_EN)
      lwc_inSegEoT <= `BSV_ASSIGNMENT_DELAY lwc_inSegEoT_D_IN;
    if (lwc_inSegLast_EN)
      lwc_inSegLast <= `BSV_ASSIGNMENT_DELAY lwc_inSegLast_D_IN;
    if (lwc_op_decrypt_EN)
      lwc_op_decrypt <= `BSV_ASSIGNMENT_DELAY lwc_op_decrypt_D_IN;
    if (lwc_outCounter_EN)
      lwc_outCounter <= `BSV_ASSIGNMENT_DELAY lwc_outCounter_D_IN;
    if (lwc_outRemainder_EN)
      lwc_outRemainder <= `BSV_ASSIGNMENT_DELAY lwc_outRemainder_D_IN;
    if (lwc_outSegLast_EN)
      lwc_outSegLast <= `BSV_ASSIGNMENT_DELAY lwc_outSegLast_D_IN;
    if (lwc_outSegPt_EN)
      lwc_outSegPt <= `BSV_ASSIGNMENT_DELAY lwc_outSegPt_D_IN;
    if (lwc_pdiCounter_EN)
      lwc_pdiCounter <= `BSV_ASSIGNMENT_DELAY lwc_pdiCounter_D_IN;
    if (lwc_sdiCounter_EN)
      lwc_sdiCounter <= `BSV_ASSIGNMENT_DELAY lwc_sdiCounter_D_IN;
    if (lwc_statFailure_EN)
      lwc_statFailure <= `BSV_ASSIGNMENT_DELAY lwc_statFailure_D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    ascon_bdiFlags = 7'h2A;
    ascon_cipher_asconState =
	320'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_cipher_first_block = 1'h0;
    ascon_cipher_keyStore = 128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    ascon_cipher_loadNonceCounter = 1'h0;
    ascon_cipher_postPermuteState = 3'h2;
    ascon_cipher_roundConstant = 8'hAA;
    ascon_cipher_roundCounter = 3'h2;
    ascon_cipher_squeezeCounter = 2'h2;
    ascon_cipher_squeezeHash = 1'h0;
    ascon_cipher_state = 3'h2;
    ascon_inLayer_block = 64'hAAAAAAAAAAAAAAAA;
    ascon_inLayer_closed = 1'h0;
    ascon_inLayer_counter = 2'h2;
    ascon_inLayer_needsPad = 1'h0;
    ascon_inLayer_valids = 8'hAA;
    ascon_outLayer_blockVec = 64'hAAAAAAAAAAAAAAAA;
    ascon_outLayer_validsVec = 8'hAA;
    lwc_doSender_data_reg = 33'h0AAAAAAAA;
    lwc_doSender_data_valid = 1'h0;
    lwc_finalRemainBytes = 2'h2;
    lwc_headersFifo_rv = 33'h0AAAAAAAA;
    lwc_inFlags = 9'h0AA;
    lwc_inSegEoT = 1'h0;
    lwc_inSegLast = 1'h0;
    lwc_op_decrypt = 1'h0;
    lwc_outCounter = 14'h2AAA;
    lwc_outRemainder = 2'h2;
    lwc_outSegLast = 1'h0;
    lwc_outSegPt = 1'h0;
    lwc_outState = 2'h2;
    lwc_pdiCounter = 14'h2AAA;
    lwc_pdiReceiver_fifof_rv = 33'h0AAAAAAAA;
    lwc_pdiState = 3'h2;
    lwc_sdiCounter = 32'hAAAAAAAA;
    lwc_sdiReceiver_fifof_rv = 33'h0AAAAAAAA;
    lwc_sdiState = 2'h2;
    lwc_statFailure = 1'h0;
    lwc_tagFifo_rv = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // lwc

